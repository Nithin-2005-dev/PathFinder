model ProjectTeam {
  id          String             @id @default(uuid())
  projectId   String
  name        String?
  status      TeamStatus         @default(IN_PROGRESS)
  percentDone Int                @default(0)
  startedAt   DateTime           @default(now())
  completedAt DateTime?
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  members     TeamMember[]
  milestones  ProjectMilestone[]
  messages    TeamMessage[]
  isDeleted   Boolean            @default(false)
  deletedAt   DateTime?

  @@index([projectId])
}

model TeamMember {
  id                  String           @id @default(uuid())
  teamId              String
  userId              String
  joinedAt            DateTime         @default(now())
  role                TeamMemberRole   @default(CONTRIBUTOR)
  status              TeamMemberStatus @default(ACTIVE)
  contributionPercent Int?

  team ProjectTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([userId])
}

model ProjectMilestone {
  id          String          @id @default(uuid())
  teamId      String
  name        String
  description String?
  status      MilestoneStatus @default(TODO)
  dueDate     DateTime?
  completedAt DateTime?
  assignedTo  String?
  team        ProjectTeam     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model TeamMessage {
  id       String      @id @default(uuid())
  teamId   String
  senderId String
  content  String
  sentAt   DateTime    @default(now())
  team     ProjectTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
  sender   User        @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([senderId])
}
