model Achievement {
  id          String  @id @default(uuid())
  name        String
  icon        String?
  description String
  rarity      String

  unlockedBy UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model UserActivitySummary {
  id         String         @id @default(uuid())
  userId     String
  actionType UserActionType
  count      Int            @default(0)
  period     PeriodType
  lastXP     Int            @default(0)
  updatedAt  DateTime       @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, actionType, period])
  @@index([userId])
}

model GamificationRule {
  id          String         @id @default(uuid())
  actionType  UserActionType
  xpAward     Int
  levelNeeded Int            @default(1)
  description String?
  active      Boolean        @default(true)
}

model UserXPHistory {
  id        String   @id @default(uuid())
  userId    String
  delta     Int
  reason    String
  meta      Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
